serviceMetaInfo:
  host: http://account-service
  port: 6000
  serviceAppName: account-service # spring.application.name
  contextPath: /accounts

springConfig:
  security:
    oauth2:
      resource:
        user-info-uri: http://auth-service:5000/uaa/users/current

restapis:
  '/': 
    POST:
      method: '<com.piggymetrics.account.controller.AccountController: com.piggymetrics.account.domain.Account createNewAccount(com.piggymetrics.account.domain.User)>'
      # method2: '<com.piggymetrics.account.client.AuthServiceClient void createUser(com.piggymetrics.account.domain.User)>'
      # method3: '<org.springframework.data.repository.CrudRepository com.piggymetrics.account.domain.Account save(com.piggymetrics.account.domain.Account)>'
      # security:
        # - authClient.createUser(user)   # security rely on auth service?
      parameters:
        user:
          in: body
          type: com.piggymetrics.account.domain.User
      response:
        '200':
          description: 'OK'
          data:
            object: 'com.piggymetrics.account.domain.Account'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '404':
          description: 'Not Found'

  '/{name}':
    GET: 
      method: '<com.piggymetrics.account.controller.AccountController: com.piggymetrics.account.domain.Account getAccountByName(java.lang.String)>'
      # method2: '<com.piggymetrics.account.repository.AccountRepository: com.piggymetrics.account.domain.Account findByName(java.lang.String)>'
      # method3: '<org.springframework.data.repository.CrudRepository: java.util.Optional findById(java.lang.String)>'
      # method4: 'org.springframework.data.repository.Repository'
      # so, this account repository is extending Spring Data central repository interface
      # findBy<Name> is a Spring Data convention
      security: 
        - oauth2.hasScope('server')
        - name.equals('demo')
        - Assert.hasLength(accountName) # Is this related to security?
        # what is the difference between input filtering/validation and security?
      parameters:
        name:
          in: path # or query, cookie, ...
          type: java.lang.String
      response:
        '200': 
          description: 'OK'
          data: 
            object: 'com.piggymetrics.account.domain.Account'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '404':
          description: 'Not Found' 
          
  '/current':
    GET: 
      method: '<com.piggymetrics.account.controller.AccountController: com.piggymetrics.account.domain.Account getCurrentAccount(java.security.Principal)>'
      # very similar to the above one, only difference is the use of principal
      # method2: '<com.piggymetrics.account.repository.AccountRepository: com.piggymetrics.account.domain.Account findByName(java.lang.String)>'
      # method3: '<org.springframework.data.repository.CrudRepository: java.util.Optional findById(java.lang.String)>'
      # method4: 'org.springframework.data.repository.Repository'
      security:
        - java.security.Principal.getName()
        - Assert.notNull()
      parameters:
        principal:
          in: body
          type: java.security.Principal
      response:
        '200':
          description: 'OK'
          data: 
            object: 'com.piggymetrics.account.domain.Account'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '404':
          description: 'Not Found' 

    PUT: 
      method: '<com.piggymetrics.account.controller.AccountController: void saveCurrentAccount(java.security.Principal,com.piggymetrics.account.domain.Account)>'
      # method2: '<com.piggymetrics.account.repository.AccountRepository: com.piggymetrics.account.domain.Account findByName(java.lang.String)>'
      # method3: '<org.springframework.data.repository.CrudRepository: java.util.Optional findById(java.lang.String)>'
      # method4: 'org.springframework.data.repository.Repository'
      # method5: '<org.springframework.data.repository.CrudRepository com.piggymetrics.account.domain.Account save(com.piggymetrics.account.domain.Account)>'
      security:
        - java.security.Principal.getName()
        - @Valid @RequestBody
      parameters:
        principal:
          in: body
          type: java.security.Principal
        account:
          in: body
          type: com.piggymetrics.statistics.domain.Account
      requestBody: 
        data:
          object: 'com.piggymetrics.account.domain.User'
      response:
        '200':  # since the method is void, the response should be empty?
          description: 'OK'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '404':
          description: 'Not Found' 


calls:
  '<com.piggymetrics.account.client.StatisticsServiceClient: java.util.List getStatisticsByAccountName(java.lang.String)>':
    serviceName: 'statistics-service'
    endpoint: '/statistics/{accountName}'
    httpMethod: GET
    parameters: 
      accountName: 
        in: path
        type: java.lang.String
    security:
      - oauth2.hasScope('server')
      - name.equals('demo')

  '<com.piggymetrics.account.client.AuthServiceClient: void createUser(com.piggymetrics.account.domain.User)>':
    serviceName: 'auth-service'
    endpoint: '/uaa/users'
    httpMethod: POST
    parameters:
      user:
        in: body
        type: com.piggymetrics.account.domain.User
    security:
      - oauth2.hasScope('server')